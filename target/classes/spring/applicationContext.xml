<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		                   http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						   http://www.springframework.org/schema/context
						   http://www.springframework.org/schema/context/spring-context-3.2.xsd
						   http://www.springframework.org/schema/aop
						   http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
						   http://www.springframework.org/schema/tx
						   http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

    <!-- 配置@service包扫描器 -->
    <context:component-scan base-package="com.ieps.*"/>

    <!-- 配置数据源 -->
    <!-- 1.0 加载配置文件 -->
    <context:property-placeholder location="classpath:properties/*.properties"/>
    <!-- 1.1 创建数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--基本属性 url、user、password-->
        <property name="driverClassName" value="${druid.driverClassName}"/>
        <property name="username" value="${druid.username}"/>
        <property name="password" value="${druid.password}"/>
        <property name="url" value="${druid.url}"/>
    </bean>

    <!-- 第二步：配置sqlSessionFactory -->
    <!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置mapper文件位置，扫描映射文件，可以使用Ant风格的路径格式 -->
        <property name="mapperLocations" value="classpath:mappers/*.xml"/>
        <!--扫描包 配置别名 -->
        <property name="typeAliasesPackage" value="com.ieps.pojo"/>
        <!-- 加载mybatis的全局配置文件 -->
        <property name="configLocation" value="classpath:spring/sqlMapConfig.xml"/>

    </bean>

    <!-- 配置mybatis接口代理开发
         *  接口类名和映射文件必须同名
         *  接口类名和映射文件必须在同一目录下
         *  映射文件namespace名字必须是接口的全限定类名
         *  接口的方法名必须和映射Statement的id一致
     -->
    <!-- 配置Mapper扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ieps.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 第三步：配置事务 -->
    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置通知要进行的事务 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!-- 切面 -->
    <!-- 配置拦截service -->
    <aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.ieps.service.*.*(..))"/>
    </aop:config>

    <!-- 配置验证码 google kaptcha的相关配置 -->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <!-- 是否有边框 可选yes 或者 no -->
                        <prop key="kaptcha.border">no</prop>
                        <!-- 边框颜色 -->
                        <prop key="kaptcha.border.color">105,179,90</prop>
                        <!-- 验证码文本字符颜色 -->
                        <prop key="kaptcha.textproducer.font.color">blue</prop>
                        <!-- 验证码文本字符大小 -->
                        <prop key="kaptcha.textproducer.font.size">30</prop>
                        <!-- 验证码图片的宽度 默认200 -->
                        <prop key="kaptcha.image.width">90</prop>
                        <!-- 验证码图片的高度 默认50 -->
                        <prop key="kaptcha.image.height">40</prop>
                        <!-- 验证码文本字符长度  默认为5 -->
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                        <!-- 验证码文本字体样式  默认为new Font("Arial", 1, fontSize), new Font("Courier", 1, fontSize)  -->
                        <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>

</beans>
